generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CardTemplate {
    id               String                @id @default(cuid())
    userId           String
    name             String
    width            String
    height           String
    templateImage    String
    cornerBevel      Int
    backgroundColor  String
    createdAt        DateTime              @default(now())
    updatedAt        DateTime              @updatedAt
    elements         CardTemplateElement[]
    TemplateMetaData TemplateMetaData[]

    @@unique([id])
}

model CardTemplateElement {
    id                 String           @id @default(cuid())
    index              Int
    x1                 Int
    y1                 Int
    x2                 Int
    y2                 Int
    metadata           TemplateMetaData @relation(fields: [templateMetaDataId], references: [id])
    roughElement       RoughElement     @relation(fields: [id], references: [id])
    CardTemplate       CardTemplate?    @relation(fields: [cardTemplateId], references: [id])
    cardTemplateId     String?
    templateMetaDataId String

    @@unique([id])
}

model TemplateMetaData {
    id                  String                @id @default(cuid())
    name                String
    type                String
    CardTemplate        CardTemplate?         @relation(fields: [cardTemplateId], references: [id])
    cardTemplateId      String?
    CardTemplateElement CardTemplateElement[]

    @@unique([id])
}

model RoughElement {
    id                  String                @id @default(cuid())
    shape               String
    sets                RoughElementSets[]
    options             Json
    CardTemplateElement CardTemplateElement[]

    @@unique([id])
}

model RoughElementSets {
    id             String        @id @default(cuid())
    type           String
    ops            Ops[]
    RoughElement   RoughElement? @relation(fields: [roughElementId], references: [id])
    roughElementId String?

    @@unique([id])
}

model Ops {
    id                 String            @id @default(cuid())
    op                 String
    data               OpsDataSet[]
    RoughElementSets   RoughElementSets? @relation(fields: [roughElementSetsId], references: [id])
    roughElementSetsId String?

    @@unique([id])
}

model OpsDataSet {
    id    String  @id @default(cuid())
    data  Int
    opsId String?
    Ops   Ops?    @relation(fields: [opsId], references: [id])

    @@unique([id])
}
